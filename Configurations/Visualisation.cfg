+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowser = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "../../MARTe2/Resources/HTTP"
    }    
    +ResourcesHtmlDemo = {
        Class = HttpDirectoryResource
        BaseDir = "../Resources/HTTP"
    }
}
+WebServer = {
    Class = HttpService
    Port = 8085
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = "RUNNING"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = VisualisationApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Running
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = VisualisationApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUNNING = {
        Class = ReferenceContainer
        +GO_ERROR = {
            Class = StateMachineEvent
            NextState = ERROR
            NextErrorState = ERROR
        }
    }
    +ERROR = {
        Class = ReferenceContainer
        +GO_ERROR = {
            Class = StateMachineEvent
            NextState = ERROR
            NextErrorState = ERROR
        }
    }
}
$VisualisationApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }            
            }
        }
        +SinOutputGAM1 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 0.4
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    Frequency = 50
                    DataSource = Timer
                    Type = uint32
                }
            } 
            OutputSignals = {
                SinOutput1 = {
                    DataSource = DDB1
                    Type = float32
                }
            }
        }
        +SinOutputGAM2 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 0.2
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = Timer
                    Type = uint32
                }
            } 
            OutputSignals = {
                SinOutput2 = {
                    DataSource = DDB1
                    Type = float32
                }
            }
        }
        +SinOutputGAM3 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 0.1
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = Timer
                    Type = uint32
                }
            } 
            OutputSignals = {
                SinOutput3 = {
                    DataSource = DDB1
                    Type = float32
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        
    }
    +States = {
        Class = ReferenceContainer
        +Running = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {
                        GAMTimer
                        SinOutputGAM1
                        SinOutputGAM2
                        SinOutputGAM3
                    }
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {
                        GAMTimer
                    }
                }
            }
        }
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
